<?php
/*
Plugin Name: Nursery Manager
Plugin URI: https://github.com/yourusername/nursery-manager
Description: מערכת ניהול משתלה עם זיהוי צמחים וממשק נייד
Version: 1.0.0
Requires at least: 5.8
Requires PHP: 7.4
Author: Your Name
Author URI: https://yourwebsite.com
License: GPL v2 or later
License URI: https://www.gnu.org/licenses/gpl-2.0.html
Text Domain: nursery-manager
Domain Path: /languages
*/

if (!defined('ABSPATH')) exit;

// Define plugin constants
class Nursery_Constants {
    const VERSION = '1.0.0';
    const MIN_PHP_VERSION = '7.4';
    const MIN_WP_VERSION = '5.8';
    const MIN_WC_VERSION = '5.0';
    
    const REQUIRED_FILES = [
        'class-settings.php',
        'class-mobile-interface.php',
        'class-plant-recognition.php',
        'class-ai-handler.php',
        'class-prompt-manager.php',
        'class-database-handler.php',
        'class-activator.php',
        'class-deactivator.php'
    ];
}

class Nursery_Manager {
    private static $instance = null;
    private $plugin_path;
    private $plugin_url;

    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    private function __construct() {
        $this->plugin_path = plugin_dir_path(__FILE__);
        $this->plugin_url = plugin_dir_url(__FILE__);
        
        // System checks before initialization
        if ($this->system_requirements_met()) {
            $this->init();
        }
    }

    private function system_requirements_met() {
        // Check PHP Version
        if (version_compare(PHP_VERSION, Nursery_Constants::MIN_PHP_VERSION, '<')) {
            add_action('admin_notices', function() {
                echo '<div class="error"><p>';
                printf(
                    __('Nursery Manager requires PHP %s or higher. You are running %s', 'nursery-manager'),
                    Nursery_Constants::MIN_PHP_VERSION,
                    PHP_VERSION
                );
                echo '</p></div>';
            });
            return false;
        }

        // Check WordPress Version
        global $wp_version;
        if (version_compare($wp_version, Nursery_Constants::MIN_WP_VERSION, '<')) {
            add_action('admin_notices', function() use ($wp_version) {
                echo '<div class="error"><p>';
                printf(
                    __('Nursery Manager requires WordPress %s or higher. You are running %s', 'nursery-manager'),
                    Nursery_Constants::MIN_WP_VERSION,
                    $wp_version
                );
                echo '</p></div>';
            });
            return false;
        }

        // Check WooCommerce
        if (!class_exists('WooCommerce')) {
            add_action('admin_notices', function() {
                echo '<div class="error"><p>';
                _e('Nursery Manager requires WooCommerce to be installed and active.', 'nursery-manager');
                echo '</p></div>';
            });
            return false;
        }

        // Check WooCommerce Version
        if (defined('WC_VERSION') && version_compare(WC_VERSION, Nursery_Constants::MIN_WC_VERSION, '<')) {
            add_action('admin_notices', function() {
                echo '<div class="error"><p>';
                printf(
                    __('Nursery Manager requires WooCommerce %s or higher.', 'nursery-manager'),
                    Nursery_Constants::MIN_WC_VERSION
                );
                echo '</p></div>';
            });
            return false;
        }

        // Check directory permissions
        $upload_dir = wp_upload_dir();
        if (!wp_is_writable($upload_dir['basedir'])) {
            add_action('admin_notices', function() {
                echo '<div class="error"><p>';
                _e('Nursery Manager requires write permissions in the uploads directory.', 'nursery-manager');
                echo '</p></div>';
            });
            return false;
        }

        return true;
    }

    private function init() {
        // Register activation/deactivation hooks
        register_activation_hook(__FILE__, array($this, 'activate'));
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));
        
        // Initialize plugin
        add_action('plugins_loaded', array($this, 'load_plugin_textdomain'));
        add_action('init', array($this, 'init_plugin'));
        
        // Admin notices for OpenAI API key
        add_action('admin_notices', array($this, 'check_api_key'));
    }

    public function activate() {
        require_once $this->plugin_path . 'includes/class-activator.php';
        
        // Create database tables
        Nursery_Activator::create_tables();
        
        // Set default options
        Nursery_Activator::set_default_options();
        
        // Set activation flag
        update_option('nursery_manager_activated', true);
        
        // Clear any relevant caches
        wp_cache_flush();
    }

    public function deactivate() {
        require_once $this->plugin_path . 'includes/class-deactivator.php';
        Nursery_Deactivator::deactivate();
    }

    public function load_plugin_textdomain() {
        load_plugin_textdomain(
            'nursery-manager',
            false,
            dirname(plugin_basename(__FILE__)) . '/languages/'
        );
    }

    public function init_plugin() {
        $this->load_dependencies();
        $this->init_components();
    }

    private function load_dependencies() {
        foreach (Nursery_Constants::REQUIRED_FILES as $file) {
            $filepath = $this->plugin_path . 'includes/' . $file;
            if (file_exists($filepath)) {
                require_once $filepath;
            } else {
                // Log missing file error
                error_log(sprintf(
                    'Nursery Manager: Required file %s is missing',
                    $filepath
                ));
            }
        }
    }

    private function init_components() {
        // Initialize main components
        $this->settings = new Nursery_Settings();
        $this->mobile_interface = new Nursery_Mobile_Interface();
        $this->plant_recognition = new Nursery_Plant_Recognition();
        $this->ai_handler = new Nursery_AI_Handler();
        $this->prompt_manager = new Nursery_Prompt_Manager();

        // Add custom post types and taxonomies
        add_action('init', array($this, 'register_post_types'));
    }

    public function check_api_key() {
        if (current_user_can('manage_options')) {
            $api_key = get_option('nursery_openai_api_key');
            if (!$api_key) {
                echo '<div class="notice notice-warning is-dismissible"><p>';
                printf(
                    __('Please add your OpenAI API key in the %sNursery Manager settings%s to enable AI features.', 'nursery-manager'),
                    '<a href="' . admin_url('admin.php?page=nursery-settings') . '">',
                    '</a>'
                );
                echo '</p></div>';
            }
        }
    }

    public function register_post_types() {
        // Register custom post types if needed
    }

    // Helper functions
    public function get_plugin_path() {
        return $this->plugin_path;
    }

    public function get_plugin_url() {
        return $this->plugin_url;
    }
}

// Initialize plugin
function nursery_manager() {
    return Nursery_Manager::get_instance();
}

// Start the plugin
add_action('plugins_loaded', 'nursery_manager');
